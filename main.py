import discord
from discord.ext import commands
import asyncio
import os

from dotenv import load_dotenv
load_dotenv()

from src.database import (
    init_settings,
    init_applications,
    init_owners,
    sync_approver_role,
    applications_cache,
    owners_cache
)
from src.views import ApplyButtonView, ApplicationView
from src.commands import setup_commands
from src.utils import clear_old_states

class BotManager:
    def __init__(self):
        self.intents = discord.Intents.default()
        self.bot_token = os.getenv('BOT_TOKEN')
        self.bot = commands.Bot(command_prefix='/', intents=self.intents)
        self._setup_events()

    def _setup_events(self):
        @self.bot.event
        async def on_ready():
            await self._handle_ready()

        @self.bot.tree.error
        async def on_app_command_error(interaction: discord.Interaction, error: discord.app_commands.AppCommandError):
            await self._handle_command_error(interaction, error)

    async def _handle_ready(self):
        print(f'ü§ñ –ë–æ—Ç {self.bot.user} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...')
        
        try:
            await self._initialize_data()
            print("‚ú® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        self._add_persistent_views()
        await self._restore_application_views()
        
        print(f'üéâ –ë–æ—Ç {self.bot.user} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')
        
        try:
            await self._setup_commands()
            print("‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥: {e}')
        
        try:
            await self._sync_commands()
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}')
        
        try:
            self._start_cleanup_task()
            print("üßπ –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–∞")
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏: {e}')

    async def _initialize_data(self):
        init_settings()
        init_applications()
        init_owners()
        sync_approver_role()

    def _add_persistent_views(self):
        self.bot.add_view(ApplyButtonView(self.bot))

    async def _restore_application_views(self):
        for guild_id, applications in applications_cache.items():
            guild = self.bot.get_guild(int(guild_id))
            if not guild:
                continue
            for message_id, app_data in applications.items():
                channel = guild.get_channel(int(app_data['channel_id']))
                if not channel:
                    continue
                
                try:
                    message = await channel.fetch_message(int(message_id))
                    if message.components and any(isinstance(c, discord.ui.Button) for row in message.components for c in row.children):
                        self.bot.add_view(ApplicationView(applicant_id=app_data['applicant_id'], message_id=message_id, guild_id=int(guild_id), bot=self.bot))
                        continue
                except discord.NotFound:
                    pass

                embed = self._create_embed_from_data(app_data['embed_data'])
                content = self._create_content(app_data, guild, guild_id)
                view = ApplicationView(applicant_id=app_data['applicant_id'], message_id=message_id, guild_id=int(guild_id), bot=self.bot)
                
                self.bot.add_view(view)
                await channel.send(content=content, embed=embed, view=view)
                await asyncio.sleep(0.1)

    def _create_embed_from_data(self, embed_data):
        embed = discord.Embed(
            title=embed_data['title'],
            description=embed_data.get('description'),
            color=embed_data['color']
        )
        if embed_data.get('thumbnail'):
            embed.set_thumbnail(url=embed_data['thumbnail']['url'])
        for field in embed_data['fields']:
            embed.add_field(name=field['name'], value=field['value'], inline=field['inline'])
        if embed_data.get('footer'):
            embed.set_footer(text=embed_data['footer']['text'])
        return embed

    def _create_content(self, app_data, guild, guild_id):
        approver_role_id = owners_cache.get('approver_role_ids', {}).get(guild_id)
        role = guild.get_role(int(approver_role_id)) if approver_role_id else None
        mention = role.mention if role else "@everyone"
        return f"{mention} <@{app_data['applicant_id']}>"

    async def _setup_commands(self):
        await setup_commands(self.bot)

    async def _sync_commands(self):
        print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —Å Discord...")
        synced = await self.bot.tree.sync()
        
        print(f'‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(synced)} slash –∫–æ–º–∞–Ω–¥:')
        for command in synced:
            command_emoji = {
                'addform': 'üìù',
                'approvchannel': '‚öôÔ∏è',
                'giveapprov': 'üë•',
                'checkroles': 'üîç',
                'help': '‚ùì',
                'sync': 'üîÑ'
            }
            emoji = command_emoji.get(command.name, 'üîπ')
            print(f"  {emoji} /{command.name}: {command.description}")
        
        print("üìù –ö–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Discord —á–µ—Ä–µ–∑ '/'")

    def _start_cleanup_task(self):
        self.bot.loop.create_task(clear_old_states())

    async def _handle_command_error(self, interaction: discord.Interaction, error: discord.app_commands.AppCommandError):
        if isinstance(error, discord.app_commands.MissingPermissions):
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        elif isinstance(error, discord.app_commands.CommandOnCooldown):
            await interaction.response.send_message(f"‚è∞ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {error.retry_after:.2f} —Å–µ–∫—É–Ω–¥.", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
            print(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {error}")

    def run(self):
        self.bot.run(self.bot_token)

class Application:
    def __init__(self):
        self.bot_manager = BotManager()

    def run(self):
        print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.bot_manager.run()

if __name__ == "__main__":
    app = Application()
    app.run()