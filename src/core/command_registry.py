"""
–†–µ–µ—Å—Ç—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è slash –∫–æ–º–∞–Ω–¥–∞–º–∏ Discord
"""

from typing import Dict, Optional, List
import discord
from discord import app_commands
from .interfaces import ICommand, ICommandRegistry
from .command_factory import command_factory
from src.permissions import universal_permission_check


class CommandRegistry(ICommandRegistry):
    """–†–µ–µ—Å—Ç—Ä –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    def __init__(self, bot: discord.Client):
        self._bot = bot
        self._commands: Dict[str, ICommand] = {}
        self._slash_commands_config = self._get_slash_commands_config()
    
    def _get_slash_commands_config(self) -> Dict[str, dict]:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è slash –∫–æ–º–∞–Ω–¥"""
        return {
            "addform": {
                "description": "üìù –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
                "parameters": {
                    "channel": {
                        "type": discord.TextChannel,
                        "description": "–ö–∞–Ω–∞–ª, –≥–¥–µ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫"
                    }
                }
            },
            "approvchannel": {
                "description": "‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫",
                "parameters": {
                    "channel": {
                        "type": discord.TextChannel,
                        "description": "–ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞)",
                        "required": False,
                        "default": None
                    }
                }
            },
            "giveapprov": {
                "description": "üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –∏ –≤—ã–¥–∞—á–∏ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏",
                "parameters": {
                    "approver": {
                        "type": discord.Role,
                        "description": "–†–æ–ª—å, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ—Ç–æ—Ä–æ–π —Å–º–æ–≥—É—Ç –æ–¥–æ–±—Ä—è—Ç—å/–æ—Ç–∫–ª–æ–Ω—è—Ç—å –∑–∞—è–≤–∫–∏"
                    },
                    "approved": {
                        "type": discord.Role,
                        "description": "–†–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏"
                    }
                }
            },
            "help": {
                "description": "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞",
                "parameters": {}
            },
            "sync": {
                "description": "üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —Å Discord",
                "parameters": {}
            },
            "createcapt": {
                "description": "üìã –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Ç–∞–π–º–µ—Ä–æ–º",
                "parameters": {
                    "max_members": {
                        "type": int,
                        "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ (–æ—Ç 2 –¥–æ 50)"
                    },
                    "timer_minutes": {
                        "type": int,
                        "description": "–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö (1-1440, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                        "required": False,
                        "default": None
                    }
                }
            },
            "blacklistchannel": {
                "description": "üì¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö",
                "parameters": {
                    "channel": {
                        "type": discord.TextChannel,
                        "description": "–ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö"
                    }
                }
            },
            "blacklist": {
                "description": "‚õî –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–º–µ–π",
                "parameters": {
                    "user_id": {
                        "type": str,
                        "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1395845799174344776)"
                    },
                    "static_id_majestic": {
                        "type": str,
                        "description": "–ò–≥—Ä–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    },
                    "reason": {
                        "type": str,
                        "description": "–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
                    }
                }
            },
            "unblacklist": {
                "description": "‚õî –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                "parameters": {
                    "user_id": {
                        "type": str,
                        "description": "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
                    }
                }
            },
            "manageroles": {
                "description": "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞",
                "parameters": {}
            }
        }
    
    def register_command(self, command: ICommand) -> None:
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É"""
        self._commands[command.name] = command
    
    def get_command(self, name: str) -> Optional[ICommand]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ –∏–º–µ–Ω–∏"""
        return self._commands.get(name)
    
    def get_all_commands(self) -> Dict[str, ICommand]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"""
        return self._commands.copy()
    
    async def setup_slash_commands(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å slash –∫–æ–º–∞–Ω–¥—ã Discord"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        command_types = command_factory.get_available_command_types()
        
        for command_type in command_types:
            try:
                command = command_factory.create_command(command_type, self._bot)
                self.register_command(command)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {command_type}: {e}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º slash –∫–æ–º–∞–Ω–¥—ã
        await self._register_slash_commands()
        
    
    async def _register_slash_commands(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è slash –∫–æ–º–∞–Ω–¥ –≤ Discord"""
        for command_name, command in self._commands.items():
            if command_name in self._slash_commands_config:
                config = self._slash_commands_config[command_name]
                await self._create_slash_command(command, config)
    
    async def _create_slash_command(self, command: ICommand, config: dict) -> None:
        """–°–æ–∑–¥–∞—Ç—å slash –∫–æ–º–∞–Ω–¥—É"""
        command_name = command.name
        description = config["description"]
        parameters = config.get("parameters", {})
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥
        wrapper_func = self._create_command_wrapper(command, parameters)
        
        # –°–æ–∑–¥–∞–µ–º slash –∫–æ–º–∞–Ω–¥—É
        slash_command = app_commands.Command(
            name=command_name,
            description=description,
            callback=wrapper_func
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if parameters:
            descriptions = {name: config["description"] for name, config in parameters.items()}
            slash_command = app_commands.describe(**descriptions)(slash_command)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        slash_command = universal_permission_check()(slash_command)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –¥–µ—Ä–µ–≤–µ
        self._bot.tree.add_command(slash_command)
            
    def _create_command_wrapper(self, command: ICommand, parameters: dict):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ —Ç–∏–ø–æ–≤"""
        
        # –ö–æ–º–∞–Ω–¥—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not parameters:
            async def wrapper(interaction: discord.Interaction) -> None:
                await command.execute(interaction)
            return wrapper
        
        # –ö–æ–º–∞–Ω–¥—ã —Å –æ–¥–Ω–∏–º –∫–∞–Ω–∞–ª–æ–º
        if len(parameters) == 1 and "channel" in parameters:
            param_config = parameters["channel"]
            if param_config.get("required", True):
                async def wrapper(interaction: discord.Interaction, channel: discord.TextChannel) -> None:
                    await command.execute(interaction, channel=channel)
            else:
                async def wrapper(interaction: discord.Interaction, channel: discord.TextChannel = None) -> None:
                    await command.execute(interaction, channel=channel)
            return wrapper
        
        # –ö–æ–º–∞–Ω–¥—ã —Å –¥–≤—É–º—è —Ä–æ–ª—è–º–∏
        if len(parameters) == 2 and "approver" in parameters and "approved" in parameters:
            async def wrapper(interaction: discord.Interaction, approver: discord.Role, approved: discord.Role) -> None:
                await command.execute(interaction, approver=approver, approved=approved)
            return wrapper
        
        # –ö–æ–º–∞–Ω–¥–∞ createcapt
        if "max_members" in parameters:
            if "timer_minutes" in parameters:
                async def wrapper(interaction: discord.Interaction, max_members: int, timer_minutes: int = None) -> None:
                    await command.execute(interaction, max_members=max_members, timer_minutes=timer_minutes)
            else:
                async def wrapper(interaction: discord.Interaction, max_members: int) -> None:
                    await command.execute(interaction, max_members=max_members)
            return wrapper
        
        # –ö–æ–º–∞–Ω–¥—ã blacklist
        if "static_id_majestic" in parameters:
            async def wrapper(interaction: discord.Interaction, user_id: str, static_id_majestic: str, reason: str) -> None:
                await command.execute(interaction, user_id=user_id, static_id_majestic=static_id_majestic, reason=reason)
            return wrapper
        
        # –ö–æ–º–∞–Ω–¥–∞ unblacklist
        if "user_id" in parameters and len(parameters) == 1:
            async def wrapper(interaction: discord.Interaction, user_id: str) -> None:
                await command.execute(interaction, user_id=user_id)
            return wrapper
        
        # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        async def wrapper(interaction: discord.Interaction) -> None:
            await command.execute(interaction)
        return wrapper
    
    def unregister_command(self, name: str) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã"""
        if name in self._commands:
            del self._commands[name]
            print(f"üóëÔ∏è –ö–æ–º–∞–Ω–¥–∞ {name} —É–¥–∞–ª–µ–Ω–∞")
            return True
        return False
    
    def get_command_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        return len(self._commands)
    
    def get_command_names(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∫–æ–º–∞–Ω–¥"""
        return list(self._commands.keys()) 